package lesson0108;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

public class StartForm implements Constants {
    private JRadioButton rbHvsH;
    private JRadioButton rbHvsC;
    private JTextField tfPlayerNameLeft;
    private JTextField tfPlayerNameRight;
    private JSlider sliderField;
    private JSlider sliderWinLine;
    private JButton buttonPlay;
    private JPanel panelStart;

    private String rbHvsHSaveLeft = "Human 1";
    private String rbHvsHSaveRight = "Human 2";
    private String rbHvsCSaveLeft = "Human";
    private String rbHvsCSaveRight = "Computer";

    private int playerRight = COMPUTER;


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panelStart = new JPanel();
        panelStart.setLayout(new GridLayoutManager(8, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JSeparator separator1 = new JSeparator();
        panelStart.add(separator1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Left player name");
        panelStart.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfPlayerNameLeft.setHorizontalAlignment(0);
        tfPlayerNameLeft.setText("Human");
        panelStart.add(tfPlayerNameLeft, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Right player name");
        panelStart.add(label2, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfPlayerNameRight.setHorizontalAlignment(0);
        tfPlayerNameRight.setText("Computer");
        panelStart.add(tfPlayerNameRight, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JSeparator separator2 = new JSeparator();
        panelStart.add(separator2, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Field size");
        panelStart.add(label3, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Win line size");
        panelStart.add(label4, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sliderField = new JSlider();
        sliderField.setMajorTickSpacing(1);
        sliderField.setMaximum(10);
        sliderField.setMinimum(3);
        sliderField.setMinorTickSpacing(1);
        sliderField.setPaintLabels(true);
        sliderField.setPaintTicks(true);
        sliderField.setSnapToTicks(false);
        sliderField.setValue(3);
        panelStart.add(sliderField, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sliderWinLine = new JSlider();
        sliderWinLine.setMajorTickSpacing(1);
        sliderWinLine.setMaximum(5);
        sliderWinLine.setMinimum(3);
        sliderWinLine.setMinorTickSpacing(1);
        sliderWinLine.setPaintLabels(true);
        sliderWinLine.setPaintTicks(true);
        sliderWinLine.setSnapToTicks(false);
        sliderWinLine.setValue(3);
        sliderWinLine.putClientProperty("JSlider.isFilled", Boolean.FALSE);
        sliderWinLine.putClientProperty("Slider.paintThumbArrowShape", Boolean.FALSE);
        sliderWinLine.putClientProperty("html.disable", Boolean.FALSE);
        panelStart.add(sliderWinLine, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rbHvsH.setText("Human vs Human");
        panelStart.add(rbHvsH, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rbHvsC.setSelected(true);
        rbHvsC.setText("Human vs Computer");
        panelStart.add(rbHvsC, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonPlay.setText("Play");
        panelStart.add(buttonPlay, new GridConstraints(7, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator3 = new JSeparator();
        separator3.setOrientation(1);
        panelStart.add(separator3, new GridConstraints(5, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JSeparator separator4 = new JSeparator();
        separator4.setOrientation(1);
        panelStart.add(separator4, new GridConstraints(2, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JSeparator separator5 = new JSeparator();
        separator5.setOrientation(1);
        panelStart.add(separator5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(rbHvsC);
        buttonGroup.add(rbHvsH);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelStart;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        rbHvsH = new JRadioButton();
        rbHvsH.addActionListener(e -> {
            rbHvsCSaveLeft = tfPlayerNameLeft.getText();
            rbHvsCSaveRight = tfPlayerNameRight.getText();
            tfPlayerNameLeft.setText(rbHvsHSaveLeft);
            tfPlayerNameRight.setText(rbHvsHSaveRight);
            playerRight = HUMAN;
        });

        rbHvsC = new JRadioButton();
        rbHvsC.addActionListener(e -> {
            rbHvsHSaveLeft = tfPlayerNameLeft.getText();
            rbHvsHSaveRight = tfPlayerNameRight.getText();
            tfPlayerNameLeft.setText(rbHvsCSaveLeft);
            tfPlayerNameRight.setText(rbHvsCSaveRight);
            playerRight = COMPUTER;
        });

        tfPlayerNameLeft = new JTextField(rbHvsCSaveLeft);
        tfPlayerNameRight = new JTextField(rbHvsCSaveRight);

        buttonPlay = new JButton();
        buttonPlay.addActionListener(e -> {
            new BattleFrame(playerRight,
                    tfPlayerNameLeft.getText(), tfPlayerNameRight.getText(),
                    sliderField.getValue(), sliderWinLine.getValue());
        });

    }

}
